name: Build, Test and Release

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build_and_release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        build_type: [Release]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Install Dependencies with Vcpkg
      uses: lukka/run-vcpkg@v11.5
      with:
        vcpkgDirectory: ${{ github.workspace }}/vcpkg
        runVcpkgInstall: true

    - name: Install Ninja
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          sudo apt-get install -y ninja-build
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          choco install ninja
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          brew install ninja
        fi

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake --preset Linux-Release
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          build_dir=$(cygpath -u "${{ steps.strings.outputs.build-output-dir }}")
          vcpkg_root=$(cygpath -u "${VCPKG_ROOT}")
          cmake -B $build_dir -DCMAKE_TOOLCHAIN_FILE=$vcpkg_root/scripts/buildsystems/vcpkg.cmake --preset Windows-Release
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake --preset macOS-Release
        fi

    - name: Build
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          cmake --build ${{ steps.strings.outputs.build-output-dir }}
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          cmake --build ${{ steps.strings.outputs.build-output-dir }}
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          build_dir=$(cygpath -u "${{ steps.strings.outputs.build-output-dir }}")
          cmake --build $build_dir
        fi

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          ctest --build-config ${{ matrix.build_type }}
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          ctest --build-config ${{ matrix.build_type }}
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          build_dir=$(cygpath -u "${{ steps.strings.outputs.build-output-dir }}")
          ctest --build-config ${{ matrix.build_type }}
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
      with:
        tag_name: ${{ github.ref }}-${{ matrix.os }}
        release_name: Release ${{ github.ref }}-${{ matrix.os }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ${{ steps.strings.outputs.build-output-dir }}/Vcpkg-Project-Example
        asset_name: Vcpkg-Project-Example-${{ matrix.os }}
        asset_content_type: application/octet-stream