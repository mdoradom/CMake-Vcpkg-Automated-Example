name: Build, Test and Release

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build_and_test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: 
        os:
          - ubuntu-latest
          - windows-latest
        build_type: [Release]
    outputs:
      zip-name: ${{ steps.cpack.outputs.zip-name }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Install Dependencies with Vcpkg
      uses: lukka/run-vcpkg@v11.5
      with:
        vcpkgDirectory: ${{ github.workspace }}/vcpkg
        runVcpkgInstall: true

    - name: Install Ninja
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          sudo apt-get install -y ninja-build
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          choco install ninja
        fi

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake --preset Linux-Release
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          build_dir=$(cygpath -u "${{ steps.strings.outputs.build-output-dir }}")
          vcpkg_root=$(cygpath -u "${VCPKG_ROOT}")
          cmake -B $build_dir -DCMAKE_TOOLCHAIN_FILE=$vcpkg_root/scripts/buildsystems/vcpkg.cmake --preset Windows-Release
        fi

    - name: Build
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          cmake --build ${{ steps.strings.outputs.build-output-dir }}
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          build_dir=$(cygpath -u "${{ steps.strings.outputs.build-output-dir }}")
          cmake --build $build_dir
        fi

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          ctest --build-config ${{ matrix.build_type }}
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          build_dir=$(cygpath -u "${{ steps.strings.outputs.build-output-dir }}")
          ctest --build-config ${{ matrix.build_type }}
        fi

    - name: Cpack
      id: cpack
      shell: bash
      run: |
        build_dir=$(echo "${{ steps.strings.outputs.build-output-dir }}" | tr '\\' '/')
        cd $build_dir
        cpack -G ZIP
        zip_name=$(ls *.zip)
        echo "zip-name=$zip_name" >> $GITHUB_ENV
        echo "Zip file details:"
        file $zip_name
        unzip -t $zip_name

    - name: Unzip
      shell: bash
      run: |
        unzip ${{ env.zip-name }}

    - name: Upload Artifacts
      env:
        zip-name: ${{ env.zip-name }}
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.zip-name }}
        path: ${{ github.workspace }}/build

  release:
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Download Artifacts
      uses: actions/download-artifact@v2
      with:
        path: ${{ github.workspace }}/build

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Changes in this Release
          - First Change
          - Second Change
        draft: false
        prerelease: false
      
    - name: Extract tag name
      id: get_tag
      run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    - name: Upload Release Assets
      uses: actions/github-script@v3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');
          const upload_url = "${{ steps.create_release.outputs.upload_url }}";
          const buildDir = "${{ github.workspace }}/build";
          fs.readdirSync(buildDir).forEach(file => {
            if (path.extname(file) === '.zip') {
              github.repos.uploadReleaseAsset({
                url: upload_url,
                headers: {
                  'content-length': fs.statSync(path.join(buildDir, file)).size,
                  'content-type': 'application/zip',
                },
                name: path.basename(file),
                file: fs.createReadStream(path.join(buildDir, file))
              });
            }
          });