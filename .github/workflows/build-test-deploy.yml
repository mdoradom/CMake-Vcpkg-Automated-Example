name: CMake with Vcpkg on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  install-dependencies:
    name: Install Dependencies with Vcpkg
    runs-on: ubuntu-latest
    outputs:
      vcpkg_root: ${{ steps.set-vcpkg-root.outputs.vcpkg_root }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Install Dependencies with Vcpkg
      uses: lukka/run-vcpkg@v11.5

    - name: Set VCPKG_ROOT output
      id: set-vcpkg-root
      run: echo "vcpkg_root=$VCPKG_ROOT" >> $GITHUB_ENV

    - name: Save VCPKG_ROOT to file
      run: echo "$VCPKG_ROOT" > vcpkg_root.txt

    - name: Upload VCPKG_ROOT
      uses: actions/upload-artifact@v2
      with:
        name: vcpkg_root
        path: vcpkg_root.txt

    - name: Install Ninja
      run: sudo apt-get install -y ninja-build

  build:
    needs: install-dependencies
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Download VCPKG_ROOT
      uses: actions/download-artifact@v2
      with:
        name: vcpkg_root

    - name: Load VCPKG_ROOT from file
      run: echo "VCPKG_ROOT=$(cat vcpkg_root.txt)" >> $GITHUB_ENV

    - name: Configure Project
      run: cmake -B ${{ github.workspace }}/build -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_ENV"

    - name: Print VCPKG_ROOT
      run: "echo VCPKG_ROOT: $VCPKG_ROOT"

    - name: Configure CMake
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake --preset Linux-Release
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake --preset Windows-Release
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake --preset macOS-Release
        fi

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }}