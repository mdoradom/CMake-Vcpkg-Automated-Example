name: CMake with Vcpkg on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  install_dependencies:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        build_type: [Release]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Install Dependencies with Vcpkg
      uses: lukka/run-vcpkg@v11.5
      with:
        vcpkgDirectory: ${{ github.workspace }}/vcpkg
        runVcpkgInstall: true

    - name: Install Ninja
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          sudo apt-get install -y ninja-build
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          choco install ninja
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          brew install ninja
        fi

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Pass VCPKG_ROOT to next steps
      shell: bash
      run: |
        echo "VCPKG_ROOT=${{ github.workspace }}/vcpkg" >> "$GITHUB_ENV"

    - name: Pass CMake to next steps
      shell: bash
      run: |
        echo "CMAKE_ROOT=${{ github.workspace }}/cmake" >> "$GITHUB_ENV"

  build:
    runs-on: ${{ matrix.os }}
    needs: install_dependencies
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        build_type: [Release]

    steps:
    - name: Get reusable strings
      id: strings
      run: echo "build-output-dir=$(grep -oP 'build-output-dir=\K.*' $GITHUB_OUTPUT)" >> "$GITHUB_ENV"

    - name: Get VCPKG_ROOT
      run: echo "VCPKG_ROOT=$(grep -oP 'VCPKG_ROOT=\K.*' $GITHUB_ENV)" >> "$GITHUB_ENV"

    - name: Get CMAKE_ROOT
      run: echo "CMAKE_ROOT=$(grep -oP 'CMAKE_ROOT=\K.*' $GITHUB_ENV)" >> "$GITHUB_ENV"
    
    - name: Configure CMake
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake --preset Linux-Release
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          build_dir=$(cygpath -u "${{ steps.strings.outputs.build-output-dir }}")
          vcpkg_root=$(cygpath -u "${VCPKG_ROOT}")
          cmake -B $build_dir -DCMAKE_TOOLCHAIN_FILE=$vcpkg_root/scripts/buildsystems/vcpkg.cmake --preset Windows-Release
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_TOOLCHAIN_FILE=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake --preset macOS-Release
        fi

    - name: Build
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          cmake --build ${{ steps.strings.outputs.build-output-dir }}
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          cmake --build ${{ steps.strings.outputs.build-output-dir }}
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          build_dir=$(cygpath -u "${{ steps.strings.outputs.build-output-dir }}")
          cmake --build $build_dir
        fi

  test:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        build_type: [Release]

    steps:
    - name: Get reusable strings
      id: strings
      run: echo "build-output-dir=$(grep -oP 'build-output-dir=\K.*' $GITHUB_OUTPUT)" >> "$GITHUB_ENV"

    - name: Get VCPKG_ROOT
      run: echo "VCPKG_ROOT=$(grep -oP 'VCPKG_ROOT=\K.*' $GITHUB_ENV)" >> "$GITHUB_ENV"

    - name: Get CMAKE_ROOT
      run: echo "CMAKE_ROOT=$(grep -oP 'CMAKE_ROOT=\K.*' $GITHUB_ENV)" >> "$GITHUB_ENV"

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          ctest --build-config ${{ matrix.build_type }}
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          ctest --build-config ${{ matrix.build_type }}
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          build_dir=$(cygpath -u "${{ steps.strings.outputs.build-output-dir }}")
          ctest --build-config ${{ matrix.build_type }}
        fi
